(page "index.html"
      (:require [slides :as s :refer [slide notes highlight t quicklist]]))

(defn url
  [href]
  (a {:href href} href))

(html
 (head)
 (body
  (s/slideshow
   :theme "sky"
   (slide
    (h1 "ClojureBridge")
    (t "Durham April 5, 2014"))
   (slide
    (slide
      (h1 "Introduction to Programming with Clojure"))
    (slide
      (h2 "Why Clojure?")
      (ul
        (li "1")
        (li "2")))
    (slide
      (h2 "What is Clojure good at?"))
    (slide
     (h2 "What does Clojure look like?")
      (highlight
      ;;{{
        (+ 3 4)
        (max 8 17 2)
        (eat "sandwich")
      ;;}}
      ))
    (slide
      (h2 "What is the REPL?"))
    (slide
      (h2 "Simple values"))
     (slide
       (h3 "Numbers")
        (highlight
        ;;{{
          0
          12
          -42

          10.5
          -99.9
          0.0000072725

          1/2
          -7/3
          ;;}}
        ))
     (slide
       (h3 "Arithmetic")
       (highlight
        ;;{{
        (+ 1 1)  ;=> 1 + 1 = 2
        (- 12 4) ;=> 12 - 4 = 8
        (* 13 2) ;=> 13 * 2 = 26
        (/ 27 9) ;=> 27 / 9 = 3

        Infix:  1 + 2 * 3 / 4 + 5 - 6 * 7 / 8 + 9
        Prefix: (+ (- (+ (+ 1 (/ (* 2 3) 4)) 5) (/ (* 6 7) 8)) 9)

        Infix:  1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9
        Prefix: (+ 1 2 3 4 5 6 7 8 9)

        (+ 4/3 7/8)   ;=> 53/24
        (- 9 4.2 1/2) ;=> 4.3
        (* 8 1/4)     ;=> 2
        (/ 27/2 1.5)  ;=> 3.0
          ;;}}
        ))
     (slide
       (h3 "EXERCISE Basic arithmetic"))
     (slide
       (h3 "Strings and characters")
       (highlight
        ;;{{
          "Hello world"
          "This is a longer string that I wrote for purposes of an example."
          "Aubrey said, \"I think we should go to the Orange Julius.\""
         ;;}}
         ))
     (slide
       (h3 "Booleans and nil"))
     (slide
       (h3 "Keywords"))
    
     (slide
      (h2 "Assigning names to values")
      (highlight
        ;;{{
        (def apples 3)
        (def oranges 5)
        (+ apples oranges)
        ;;}}
        ))
     (slide 
       (h2 "EXERCISE: Store the name of your hometown")))

   (slide
    (slide
     (h1 "Data Structures"))
    (slide
     :title "Data Structures"
      (ul
        (li "Collections")
        (li "Vectors")
        (li "Lists")
        (li "Maps")
        (li "Sequences")))
    (slide
      (h2 "Collections"))
    (slide
      (h2 "Vectors")
      (highlight
      ;;{{
      [1 2 3 4 5]
      ["a" 1 2 "b"]
      []
      ;;}}
        ))
    (slide
      (h2 "Vectors")
      (highlight
      ;;{{
      (vector? [:a :b :c])
      ;=> true

      (sequential? [:a :b :c])
      ;=> true

      (associative? [:a :b :c])
      ;=> true
      
      (vector :a :b :c)
      ;=> [:a :b :c]
      ;;}}       
      ))
    (slide
      (h2 "Vectors")
      (highlight
      ;;{{
      (conj [:a :b] :c)
      ;=> [:a :b :c]
      
      (count [:a :b :c])
      ;=> 3
      
      (nth [:a :b :c] 1)
      ;=> :b
      
      (first [:a :b :c])
      ;=> :a
      ;;}}       
      ))
    (slide
      (h2 "EXERCISE: Make a vector")) 
    (slide
      (h2 "Lists")
      (highlight
      ;;{{
      (list :a :b)
      (list "a" 1 2 3 "b")
      (list)
      ;;}}
      ))

    (slide
      (h2 "Lists")
      (highlight
      ;;{{
      (list? (list 1 2 3))
      ; => true
      
      (sequential? (list 1 2 3))
      ; => true
      
      (associative? (list 1 2 3))
      ; => false
      
      (list 1 2 3)
      ; => (1 2 3)
      
      (conj (list 1 2) 3)
      ; => (3 1 2)
      ;;}}
      ))
    (slide
      (h2 "Lists")
      (highlight
      ;;{{
      
      (count (list 1 2 3))
      ; => 3
      
      (first (list 1 2 3))
      ; => 1
      
      (rest (list 1 2 3))
      ; => (2 3)
      ;;}}
      ))
    (slide
      (h2 "Maps")
      (highlight
      ;;{{
      {:first "Sally", :last "Brown"}
      {:a 1 :b "two"}
      {}
      ;;}}
      ))
    (slide
      (h2 "Maps")
      (highlight
      ;;{{
        (map? {:first "Sally" :last "Brown"})
        ;=> true
      
        (sequential? {:first "Sally" :last "Brown"})
        ;=> false
       
        (associative? {:first "Sally" :last "Brown"})
        ;=> true
       
        (get {:first "Sally" :last "Brown"} :first)
        ;=> "Sally"
       
        (get {:first "Sally"} :last :MISS)
        ;=> :MISS
      ;;}}
      ))
    (slide
      (h2 "Maps")
      (highlight
      ;;{{
       (assoc {:first "Sally"} :last "Brown")
       ;=> {:first "Sally", :last "Brown"}
       
       (dissoc {:first "Sally" :last "Brown"} :last)
       ;=> {:first "Sally"}
       
       (merge {:first "Sally"} {:last "Brown"})
       ;=> {:first "Sally", :last "Brown"}
       
       (count {:first "Sally" :last "Brown"})
       ;=> 2
      ;;}}
      ))
    (slide
      (h2 "Maps")
      (highlight
      ;;{{
       (keys {:first "Sally" :last "Brown"})
       ;=> (:first :last)
       
       (vals {:first "Sally" :last "Brown"})
       ;=> ("Sally" "Brown")
       
       (into {} [[1 2] [3 4]])
       ;=> {1 2, 3 4}
      ;;}}
      ))
    (slide
      (h2 "Maps")
      (highlight
      ;;{{
      (:first {:first "Sally" :last "Brown"})
      ;=> "Sally"
        
      (:last {:first "Sally"})
      ;=> nil

      (:last {:first "Sally"} :MISS)
      ;=> :MISS
      ;;}}
      ))
    (slide
      (h2 "EXERCISE: Modeling Yourself"))
    (slide
      (h2 "Sequences")
      (highlight
      ;;{{
      (take 3 [1 2 3 4 5 6 7 8])
      ;=> (1 2 3) 
      ;;}}       
      ))
    (slide
      (h2 "Collections of Collections"))
    (slide
      (h2 "EXERCISE: Modeling your classmates"))
  )

  (slide
    (slide
      (h1 "Functions"))
    (slide
      (h2 "What are functions?")
      (highlight
      ;;{{      
      (defn triple
          "Given a number, return 3 times that number."
          [x]
          (+ x x x))

      (triple 2)    ;=> 6
      (triple 3/2)  ;=> 9/2
      (triple 30.3) ;=> 90.9

      (defn average
          [x y]
          (/ (+ x y) 2))

      (average 2 3) ;=> 5/2
      ;;}}       
        ))
    (slide
     (h2 "EXERCISE: Make a function to format naems"))
    (slide
     (h2 "Naming functions")
     (ul
      (li "zero?")
      (li "vector?")
      (li "empty?")))
    (slide
      (h2 "Important Functions"))
    (slide
      (h3 "Comparison functions")
     (highlight
      ;;{{
      (defn vegetarian?
          [person]
          (= :vegetarian (get person :dietary-restrictions)))

      (> 4 3)    ;=> true
      (>= 4 5)   ;=> false
      (< -1 1)   ;=> true
      (<= -1 -2) ;=> false
      ;;}}
      ))
    (slide
      (h3 "String functions")
      (highlight
      ;;{{
      (str "Chocolate" ", " "strawberry" ", and " "vanilla")
      ;=> "Chocolate, strawberry, and vanilla"
      ;;}}       
      ))
    (slide
      (h3 "Collection functions")
      (ul
        (li "count")
        (li "conj")
        (li "first")
        (li "rest")
        (li "nth")
        (li "assoc")
        (li "dissoc")
        (li "merge"))
      )
    (slide
      (h2 "Functions that take other functions")
      (highlight
      ;;{{       
      (defn triple
          [x]
          (+ x x x))

      (map triple [1 2 3]) ;=> [3 6 9]

      (defn add
          [x y]
          (+ x y))

      (reduce add [1 2 3]) ;=> 6

      ;;}}       
        ))
    (slide
     (h2 "Functions that take other functions")
      (highlight
      ;;{{       
      (defn join-with-space
          [string1 string2]
          (str string1 " " string2))

      (reduce join-with-space ["i" "like" "peanut" "butter" "and" "jelly"])
      ;=> "i like peanut butter and jelly"


      (join-with-space "i like" "peanut")
      (join-with-space "i like peanut" "butter")
      (join-with-space "i like peanut butter" "and")
      (join-with-space "i like peanut butter and" "jelly")
      ;;}}       
        ))
    (slide
      (h2 "Functions that take other functions")
      (highlight
      ;;{{      
      (sort-by val > {:amy 3, :renee 5, :lisa 4})
      ;=> ([:renee 5] [:lisa 4] [:amy 3])
      ;;}}     
      ))
    (slide
      (h3 "Anonymous functions")
      (highlight
      ;;{{      
      (fn [string1 string2] (str string1 " " string2))

      (map (fn [x] (+ x x x)) [1 2 3]) ;=> [3 6 9]
      (reduce (fn [x y] (+ x y)) [1 2 3]) ;=> 6
      (reduce
        (fn [s1 s2] (str s1 " " s2))
        ["i" "like" "peanut" "butter" "and" "jelly"])
        ;=> "i like peanut butter and jelly"
      ;;}}     
      ))
    (slide
      (h2 "EXERCISE: Find the average"))
    (slide
      (h2 "EXERCISE: Get the names of people"))
    (slide
     (h2 "let")
     (highlight
      ;;{{
      (defn spread
        "Given a collection of numbers, return the difference between the largest and smallest number."
        [numbers]
          (let [largest (reduce max numbers)
                smallest (reduce min numbers)]
            (- largest smallest)))

      (spread [10 7 3 -3 8]) ;=> 13
      ;;}}
      ))
    (slide
      (h2 "EXERCISE: Rewrite average"))
  )
  (slide
    (slide
     (h1 "Flow Control"))
    (slide
     (h2 "if")
     (highlight
      ;;{{
      (if (valid? data)
          (save! data)
          (error "Your data was invalid"))

      (if conditional-expression
          expression-to-evaluate-when-true
          expression-to-evaluate-when-false)
      ;;}}
      ))
    (slide
      (h2 "if")
      (highlight
      ;;{{
      (if (> 3 1)
        "3 is greater than 1"
        "3 is not greater than 1")
      ;=> "3 is greater than 1"
      
      (if (> 1 3)
        "1 is greater than 3"
        "1 is not greater than 3")
      ;=> "1 is not greater than 3"
     
      (if "anything other than nil or false is considered true"
        "A string is considered true"
        "A string is not considered true")
      ;=> "A string is considered true"
      
      (if nil
        "nil is considered true"
        "nil is not considered true")
      ;=> "nil is not considered true"
      
      (if (get {:a 1} :b)
        "expressions which evaluate to nil are considered true"
        "expressions which evaluate to nil are not considered true")
      ;=> "expressions which evaluate to nil are not considered true"
      ;;}}
      ))
    (slide
      (h3 "EXERCISE: Even more name formatting")
      (highlight
      ;;{{
      (format-name {:first "Margaret" :last "Atwood"})
      ;=> "Margaret Atwood"
      
      (format-name {:first "Ursula" :last "Le Guin" :middle "K."})
      ;=> "Ursula K. Le Guin"
      ;;}}
      )
      (br)
      (h3 "BONUS: Flexible name formatting"))
    (slide
      (h2 "Boolean logic with and, or, and not")
      (table
        (tr
          (td "x")(td "y")(td "(and x y)")(td "(or x y)")(td "(not x)")(td "(not y)")
)
        (tr
          (td "false")(td "false")(td "false")(td "false")(td "true")(td "true"))
        (tr
          (td "true")(td "false")(td "false")(td "true")(td "false")(td "true"))
        (tr
          (td "true")(td "true")(td "true")(td "true")(td "false")(td "false"))
        (tr
          (td "false")(td "true")(td "false")(td "true")(td "true")(td "false"))
        )
      )
    (slide
      (h2 "Boolean logic with and, or, and not")
      (highlight
      ;;{{
      (defn leap-year?
          "Every four years, except years divisible by 100, but yes for years divisible by 400."
          [year]
          (and (zero? (mod year 4))
               (or (zero? (mod year 400))
                   (not (zero? (mod year 100))))))
      ;;}}
        ))
    )
   (slide
    (slide
      (h1 "Making Your First Program"))
    (slide
      (h2 "Create a Project")
      (highlight
      ;;{{
      lein new app global-growth 

        | .gitignore
        | doc
        | | intro.md
        | project.clj
        | resources
        | README.md
        | src
        | | global_growth 
        | | | core.clj
        | test
        | | global_growth 
        | | | core_test.clj
      ;;}}
      ))
    (slide
      (h2 "Create a Project")
     
      (ul
        (li "project.clj")
        (li "src/global_growth/core.clj")
        (li "test")
        (li "resources")))
     (slide
      (h2 "Create a Project")
      (highlight
      ;;{{
      cd world_bank
      lein run

      Hello, world!
      ;;}}
      ))
     (slide
       (h2 "Modify a Project")
       (highlight
        ;;{{
         (defn -main
             [& args]
             (println "Hello, ClojureBridge!"))

         (defn quotify
             [quote author]
             (str quote "\n\n-- " author))
         (defn -main
             [& args]
             (println (quotify "A man who carries a cat by the tail learns" 
                               "something he can learn in no other way."
                               "Mark Twain")))

        ;;}}
        ))
     (slide 
       (h2 "Modify a Project")
       (highlight
        ;;{{
        A man who carries a cat by the tail learns something he can learn in no 
        other way.
         -- Mark Twain
        ;;}}
        ))
     (slide
       (h2 "Organization")
       (highlight
        ;;{{
        (ns global-growth.core)
        ;;}}
        ))
     (slide
       (h2 "Dependencies")
       (highlight
        ;;{{
        :dependencies [[org.clojure/clojure "1.5.1"]]


        :dependencies [[org.clojure/clojure "1.5.1"]
                                      [clj-http "0.9.0"]
                                      [cheshire "5.3.1"]]
        ;;}}
        ))
     (slide
       (h2 "Dependencies")
       (highlight
        ;;{{
        (ns world-bank.api)
         (require '[clj-http.client :as client])
         (require '[cheshire.core :as json])

         (def base-uri "http://api.worldbank.org")
         (def query-params {:format "json" :per_page 10000})

         (defn get-api
          "Returns map representing API response."
          [path qp]
           (let [base-path (str base-uri path)
                 query-params (merge qp {:format "json" :per_page 10000})
                 response (parse-json (:body (client/get base-path {:query-params query-params})))
                 metadata (first response)
                 results (second response)]
             {:metadata metadata
              :results results}))
        ;;}}
        ))
  )
)))
      
